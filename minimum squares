{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"minimos_quadrados","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GrXrzQhpXXBH","executionInfo":{"status":"ok","timestamp":1616093042438,"user_tz":180,"elapsed":651,"user":{"displayName":"Rafael Guisso","photoUrl":"","userId":"01713434337893696049"}},"outputId":"a50f0d40-7b3b-4f93-c947-a2599093a22b"},"source":["# Programa Siderurgia\n","import numpy as np\n","def sistemaAumentado(x,y,dim):\n","  m = len(x)\n","  A = np.empty((dim,dim))       #Definindo variáveis\n","  b = np.empty((dim))\n","  soma = []\n","  for i in range(0,dim+2):\n","    aux = 0\n","    for k in range(0,m):         # Montando a equação inicial a partir do dimensionamento\n","      aux = aux + x[k]**i\n","    soma.append(aux)\n"," \n","  for i in range(0,dim):\n","    for j in range(i,dim):       # Montando a parte \"A\" do sistema de matrizes\n","      A[i,j] = soma[i+j]\n","      if (i != j):\n","        A[j,i] = A[i,j]\n","  \n","  b = []\n","  for i in range(0,dim):\n","    aux = 0                          #Montando a parte \"b\" do sistema \n","    for k in range(0,m):\n","      aux = aux + y[k]*(x[k]**(i))\n","    b.append(aux)\n","  \n","  return A,b\n","      \n"," \n","x = [ 1,  2,  3,  4,  5, 6,  7,  8,  9, 10, 11, 12]\n","y = [81.4, 76.6, 64.9, 82.9, 82,  82.8, 55.5, 62,  64.1, 73.2, 78.7, 85]\n","print(x)\n","print(y)\n","A,b = sistemaAumentado(x,y,3)       #Recolhendo os dados e aplicando nas montagens de matriz acima \n","print(\"A = \", A)\n","print(\"b = \", b)\n","coef = np.linalg.solve(A,b)         #Calculando o coeficiente e assim expressando os resultados\n","print(\"coef = \",coef)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n","[81.4, 76.6, 64.9, 82.9, 82, 82.8, 55.5, 62, 64.1, 73.2, 78.7, 85]\n","A =  [[1.200e+01 7.800e+01 6.500e+02]\n"," [7.800e+01 6.500e+02 6.084e+03]\n"," [6.500e+02 6.084e+03 6.071e+04]]\n","b =  [889.1000000000001, 5746.8, 48291.4]\n","coef =  [88.11590909 -5.60641858  0.41386114]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"saw1J5R4hLzz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616092608536,"user_tz":180,"elapsed":674,"user":{"displayName":"Rafael Guisso","photoUrl":"","userId":"01713434337893696049"}},"outputId":"df7a1a0e-79f5-435b-a8be-a46d2166f201"},"source":["# Programa Desemprego\n","import numpy as np\n","#Este programa segue os mesmos passos do anterior, apenas com a mudança dos dados coletados\n","def sistemaAumentado(x,y,dim):\n","  m = len(x)\n","  A = np.empty((dim,dim))\n","  b = np.empty((dim))\n","  soma = []\n","  for i in range(0,dim+2):\n","    aux = 0\n","    for k in range(0,m):\n","      aux = aux + x[k]**i\n","    soma.append(aux)\n","\n","  for i in range(0,dim):\n","    for j in range(i,dim):\n","      A[i,j] = soma[i+j]\n","      if (i != j):\n","        A[j,i] = A[i,j]\n","  \n","  b = []\n","  for i in range(0,dim):\n","    aux = 0\n","    for k in range(0,m):\n","      aux = aux + y[k]*(x[k]**(i))\n","    b.append(aux)\n","  \n","  return A,b\n","      \n","data = np.loadtxt('data')\n","x = [1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","y = [12, 12.4, 12.7, 12.5, 12.3, 12, 11.8, 11.8,  11.8, 11.6, 11.2, 11,  11.2, 11.6,\n"," 12.2, 12.6]\n","\n","A,b = sistemaAumentado(x,y,3)\n","print(\"A = \", A)\n","print(\"b = \", b)\n","coef = np.linalg.solve(A,b)\n","print(\"coef = \",coef)"],"execution_count":8,"outputs":[{"output_type":"stream","text":["A =  [[1.60000e+01 1.36000e+02 1.49600e+03]\n"," [1.36000e+02 1.49600e+03 1.84960e+04]\n"," [1.49600e+03 1.84960e+04 2.43848e+05]]\n","b =  [190.69999999999993, 1605.3999999999999, 17640.8]\n","coef =  [12.97446429 -0.26805672  0.01307773]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"BuxpWsV7Xekv","executionInfo":{"status":"ok","timestamp":1616093061706,"user_tz":180,"elapsed":661,"user":{"displayName":"Rafael Guisso","photoUrl":"","userId":"01713434337893696049"}},"outputId":"dba95aab-3270-41a3-e2b3-a059533cf889"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","plt.plot(x,y,'ro')\n","data = np.linspace(min(x),max(x),100)           # Parte de plotagem dos resultados de forma gráfica para observar os ajustes\n","c = coef[::-1]\n","p = np.poly1d(c)\n","plt.plot(data,p(data), 'b-')\n","plt.grid()\n","plt.show()"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tyq9JfrCxdQ_","executionInfo":{"status":"ok","timestamp":1616016669988,"user_tz":180,"elapsed":650,"user":{"displayName":"Rafael Guisso","photoUrl":"","userId":"01713434337893696049"}},"outputId":"f1dece9f-8d07-46e4-a159-4c91ca211d96"},"source":["# Programa Desemprego\n","import numpy as np\n","#Este programa segue os mesmos passos do anterior, apenas com a mudança dos dados coletados\n","def sistemaAumentado(x,y,dim):\n","  m = len(x)\n","  A = np.empty((dim,dim))\n","  b = np.empty((dim))\n","  soma = []\n","  for i in range(0,dim+2):\n","    aux = 0\n","    for k in range(0,m):\n","      aux = aux + x[k]**i\n","    soma.append(aux)\n","\n","  for i in range(0,dim):\n","    for j in range(i,dim):\n","      A[i,j] = soma[i+j]\n","      if (i != j):\n","        A[j,i] = A[i,j]\n","  \n","  b = []\n","  for i in range(0,dim):\n","    aux = 0\n","    for k in range(0,m):\n","      aux = aux + y[k]*(x[k]**(i))\n","    b.append(aux)\n","  \n","  return A,b\n","      \n","data = np.loadtxt('data')\n","x = [1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","y = [12, 12.4, 12.7, 12.5, 12.3, 12, 11.8, 11.8,  11.8, 11.6, 11.2, 11,  11.2, 11.6,\n"," 12.2, 12.6]\n","print(x)\n","print(y)\n","A,b = sistemaAumentado(x,y,3)\n","print(\"A = \", A)\n","print(\"b = \", b)\n","coef = numpy.linalg.lstsq(A,b, rcond=None)\n","print(\"coef = \",coef)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","[12, 12.4, 12.7, 12.5, 12.3, 12, 11.8, 11.8, 11.8, 11.6, 11.2, 11, 11.2, 11.6, 12.2, 12.6]\n","A =  [[1.60000e+01 1.36000e+02 1.49600e+03]\n"," [1.36000e+02 1.49600e+03 1.84960e+04]\n"," [1.49600e+03 1.84960e+04 2.43848e+05]]\n","b =  [190.69999999999993, 1605.3999999999999, 17640.8]\n","coef =  (array([12.97446429, -0.26805672,  0.01307773]), array([], dtype=float64), 3, array([2.45260663e+05, 9.80447804e+01, 1.29221483e+00]))\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"Z1YaUg3Wws87","executionInfo":{"status":"ok","timestamp":1616096273591,"user_tz":180,"elapsed":692,"user":{"displayName":"Rafael Guisso","photoUrl":"","userId":"01713434337893696049"}},"outputId":"55fe7eeb-4cf5-4248-fb2d-7c55d1c86248"},"source":["import numpy\n","import matplotlib.pyplot as plt\n","\n","x = [ 1,  2,  3,  4,  5, 6,  7,  8,  9, 10, 11, 12]\n","y = [81.4, 76.6, 64.9, 82.9, 82,  82.8, 55.5, 62,  64.1, 73.2, 78.7, 85]\n","\n","\n","p = numpy.poly1d(numpy.polyfit(x, y, 7))\n","\n","data = numpy.linspace(1, 12, 100)\n","\n","plt.plot(x,y,'ro')\n","plt.scatter(x,y)\n","plt.plot(data, p(data))\n","plt.grid()\n","plt.show()\n","\n","\n","print(numpy.polyfit(x, y, 7))\n"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["[ 2.50331712e-03 -1.13763402e-01  2.06438360e+00 -1.90470806e+01\n","  9.42657217e+01 -2.42885380e+02  2.90462426e+02 -4.30424242e+01]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"eHvweli309y6"},"source":["import numpy\n","import matplotlib.pyplot as plt\n","\n","x = [1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n","y = [12, 12.4, 12.7, 12.5, 12.3, 12, 11.8, 11.8,  11.8, 11.6, 11.2, 11,  11.2, 11.6,\n"," 12.2, 12.6]\n","\n","\n","p = numpy.poly1d(numpy.polyfit(x, y, 15))\n","\n","data = numpy.linspace(1, 16, 100)\n","\n","plt.plot(x,y,'ro')\n","plt.scatter(x,y)\n","plt.plot(data, p(data))\n","plt.grid()\n","plt.show()\n","\n","\n","print(numpy.polyfit(x, y, 15))\n"],"execution_count":null,"outputs":[]}]}